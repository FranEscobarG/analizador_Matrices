
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA EQUALS LBRACKET MINUS NUMBER PLUS RBRACKET TIMES TRANSPOSE VARIABLEstatements : statement\n                  | statements statementstatement : expression\n                 | assignmentassignment : VARIABLE EQUALS expressionexpression : expression PLUS expressionexpression : expression MINUS expressionexpression : expression TIMES expressionexpression : NUMBER TIMES expressionexpression : expression TRANSPOSEexpression : matrixexpression : VARIABLEmatrix : LBRACKET rows RBRACKETrows : row\n            | rows COMMA rowrow : LBRACKET elements RBRACKET\n           | expressionelements : NUMBER\n                | elements COMMA NUMBER'
    
_lr_action_items = {'NUMBER':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,20,21,22,23,24,25,28,29,31,],[5,5,-1,-3,-4,-11,-12,5,-2,5,5,5,-10,5,5,27,-12,-6,-7,-8,-9,-5,-13,5,33,]),'VARIABLE':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,20,21,22,23,24,25,28,29,],[7,7,-1,-3,-4,-11,-12,20,-2,20,20,20,-10,20,20,20,-12,-6,-7,-8,-9,-5,-13,20,]),'LBRACKET':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,20,21,22,23,24,25,28,29,],[8,8,-1,-3,-4,-11,-12,16,-2,8,8,8,-10,8,8,16,-12,-6,-7,-8,-9,-5,-13,16,]),'$end':([1,2,3,4,6,7,9,13,20,21,22,23,24,25,28,],[0,-1,-3,-4,-11,-12,-2,-10,-12,-6,-7,-8,-9,-5,-13,]),'PLUS':([3,6,7,13,19,20,21,22,23,24,25,28,],[10,-11,-12,-10,10,-12,10,10,10,10,10,-13,]),'MINUS':([3,6,7,13,19,20,21,22,23,24,25,28,],[11,-11,-12,-10,11,-12,11,11,11,11,11,-13,]),'TIMES':([3,5,6,7,13,19,20,21,22,23,24,25,27,28,],[12,14,-11,-12,-10,12,-12,12,12,12,12,12,14,-13,]),'TRANSPOSE':([3,6,7,13,19,20,21,22,23,24,25,28,],[13,-11,-12,-10,13,-12,13,13,13,13,13,-13,]),'RBRACKET':([6,13,17,18,19,20,21,22,23,24,26,27,28,30,32,33,],[-11,-10,28,-14,-17,-12,-6,-7,-8,-9,30,-18,-13,-16,-15,-19,]),'COMMA':([6,13,17,18,19,20,21,22,23,24,26,27,28,30,32,33,],[-11,-10,29,-14,-17,-12,-6,-7,-8,-9,31,-18,-13,-16,-15,-19,]),'EQUALS':([7,],[15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,],[1,]),'statement':([0,1,],[2,9,]),'expression':([0,1,8,10,11,12,14,15,16,29,],[3,3,19,21,22,23,24,25,19,19,]),'assignment':([0,1,],[4,4,]),'matrix':([0,1,8,10,11,12,14,15,16,29,],[6,6,6,6,6,6,6,6,6,6,]),'rows':([8,16,],[17,17,]),'row':([8,16,29,],[18,18,32,]),'elements':([16,],[26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statement','statements',1,'p_statements','app.py',47),
  ('statements -> statements statement','statements',2,'p_statements','app.py',48),
  ('statement -> expression','statement',1,'p_statement','app.py',55),
  ('statement -> assignment','statement',1,'p_statement','app.py',56),
  ('assignment -> VARIABLE EQUALS expression','assignment',3,'p_assignment','app.py',60),
  ('expression -> expression PLUS expression','expression',3,'p_expression_add','app.py',65),
  ('expression -> expression MINUS expression','expression',3,'p_expression_subtract','app.py',69),
  ('expression -> expression TIMES expression','expression',3,'p_expression_multiply','app.py',73),
  ('expression -> NUMBER TIMES expression','expression',3,'p_expression_scalar_multiply','app.py',77),
  ('expression -> expression TRANSPOSE','expression',2,'p_expression_transpose','app.py',81),
  ('expression -> matrix','expression',1,'p_expression_matrix','app.py',85),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','app.py',89),
  ('matrix -> LBRACKET rows RBRACKET','matrix',3,'p_matrix','app.py',96),
  ('rows -> row','rows',1,'p_rows','app.py',100),
  ('rows -> rows COMMA row','rows',3,'p_rows','app.py',101),
  ('row -> LBRACKET elements RBRACKET','row',3,'p_row','app.py',108),
  ('row -> expression','row',1,'p_row','app.py',109),
  ('elements -> NUMBER','elements',1,'p_elements','app.py',116),
  ('elements -> elements COMMA NUMBER','elements',3,'p_elements','app.py',117),
]
